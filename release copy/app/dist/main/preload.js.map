{"version":3,"file":"preload.js","mappings":"mCAAAA,EAAOC,QAAUC,QAAQ,W,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,wECrBA,gBAIA,EAAAQ,cAAcC,kBAAkB,WAAY,CACxCC,YAAa,CACTC,OAAY,MAACC,EAAiBC,UACL,EAAAH,YAAYI,OAAOF,EAASC,GAGrDE,YAAYH,EAAmBC,GAC3B,EAAAH,YAAYM,KAAKJ,EAASC,EAC9B,EACAI,GAAGL,EAAmBM,GAClB,MAAMC,EAAe,CAACC,KAA6BP,IAAoBK,KAAQL,GAG/E,OAFA,EAAAH,YAAYO,GAAGL,EAASO,GAEjB,IAAM,EAAAT,YAAYW,eAAeT,EAASO,EACrD,EACAG,KAAKV,EAAmBM,GACpB,EAAAR,YAAYY,KAAKV,GAAS,CAACQ,KAAWP,IAASK,KAAQL,IAC3D,I","sources":["webpack://ibp/external node-commonjs \"electron\"","webpack://ibp/webpack/bootstrap","webpack://ibp/./src/main/preload.ts"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import type { IpcRendererEvent } from 'electron';\nimport { contextBridge, ipcRenderer } from 'electron';\n\nexport type Channels = 'ipc-example';\n\ncontextBridge.exposeInMainWorld('electron', {\n    ipcRenderer: {\n        async invoke(channel: string, args?: unknown[]) {\n            const result = await ipcRenderer.invoke(channel, args);\n            return result;\n        },\n        sendMessage(channel: Channels, args: unknown[]) {\n            ipcRenderer.send(channel, args);\n        },\n        on(channel: Channels, func: (...args: unknown[]) => void) {\n            const subscription = (_event: IpcRendererEvent, ...args: unknown[]) => func(...args);\n            ipcRenderer.on(channel, subscription);\n\n            return () => ipcRenderer.removeListener(channel, subscription);\n        },\n        once(channel: Channels, func: (...args: unknown[]) => void) {\n            ipcRenderer.once(channel, (_event, ...args) => func(...args));\n        },\n    },\n});\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","contextBridge","exposeInMainWorld","ipcRenderer","async","channel","args","invoke","sendMessage","send","on","func","subscription","_event","removeListener","once"],"sourceRoot":""}